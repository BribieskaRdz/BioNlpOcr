package android.cordon.customviews.activitys;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.cordon.customviews.ActionBar;
import android.cordon.customviews.ActionBar.Action;
import android.cordon.customviews.ViewPagerIndicator;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Parcelable;
import android.parcelable.objects.CoordinadorParcelable;
import android.parcelable.objects.DepartmentsParcelable;
import android.pfg.utils.call_async_tasks;
import android.pfg.utils.instalacion;
import android.pfg.utils.ocr;
import android.pfg.utils.vibrate;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.app.ListFragment;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.example.uem.pfg.ocr_bce.android.ActivityProcesarURL;
import com.example.uem.pfg.ocr_bce.android.ActivitySettings;
import com.example.uem.pfg.ocr_bce.android.R;
import com.itwizard.mezzofanti.OCR;


public class ActivityScrollableMenu extends FragmentActivity {
	
    public static  ArrayList<String> ComentariosActualizados;
	
    
	private String TAG = getClass().getSimpleName();
	
	

	
	private ActionBar actionBar;
	private Bundle bundle;
//	private CoordinadorParcelable getcoordinador;
	private static final int SELECT_PHOTO = 100;
	
	private static ImageView Camera_ocr;
	
	private  ArrayList<DepartmentsParcelable> departments; 
	
	private ProgressDialog progress;
	private EditText texto_entrada ;
	private PagerAdapter mPagerAdapter;
    ViewPager  mViewPager;
    ViewPagerIndicator mIndicator;
	
    private AlertDialog.Builder builder;
    
    
    public static final String DATA_PATH = "/sdcard/tessdata/";
    public static final String RESULTS_PATH = DATA_PATH + "out/";
    
    private ProgressDialog m_pdOCRInProgress;				// display this progress dialog while OCR runs
	
	private boolean m_bOCRInProgress = false;				// if OCR is processing or not
    
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.departments_selection_gesture);
        
        ComentariosActualizados = new ArrayList<String>();
        
    	progress = new ProgressDialog(this);
        
        // Find the indicator from the layout
        mIndicator = (ViewPagerIndicator)findViewById(R.id.indicator);
        mIndicator.setVisibility(View.INVISIBLE);
      
        
        actionBar = (ActionBar) findViewById(R.id.actionbar);
        // You can also assign the title programmatically by passing a
        // CharSequence or resource id.
//        actionBar.setTitle("Black List");
        actionBar.setSub_menu_Visibility(View.GONE);
        actionBar.setHomeLogo(R.drawable.ic_launcher);
        actionBar.getHomeLogo().setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				
				Toast.makeText(getApplicationContext(), "numero de procesadores = "+Runtime.getRuntime().availableProcessors(), Toast.LENGTH_LONG).show();
				
			}
		});
//        actionBar.setHomeAction(new IntentAction(this, ActivityPerfil.createIntent(this), R.drawable.ic_title_home_default));
        actionBar.setDisplayHomeAsUpEnabled(false);
//        actionBar.addAction( new UpdateAllAction());
        actionBar.addAction( new Action(){

			@Override
			public int getDrawable() {
				// TODO Auto-generated method stub
//				return 0;
				return R.drawable.action_search;
			}

			@Override
			public void performAction(View view) {
				// TODO Auto-generated method stub
				
				call_async_tasks.Search_Dialog(ActivityScrollableMenu.this);
				
			}
			
			
        });
        actionBar.addAction( new Action(){

        	@Override
			public int getDrawable() {
				// TODO Auto-generated method stub
//				return 0;
				return R.drawable.action_settings;
			}
        	
    	    @Override
    	    public void performAction(View view) {

    	    	Intent intent = new Intent(ActivityScrollableMenu.this, ActivitySettings.class);
				startActivity(intent);

    	    }
			
        });
        

    	
    	
        
        //Datos Producto
	    bundle = getIntent().getExtras();
		
		if(bundle !=null)
		{
			
//			getcoordinador = bundle.getParcelable("coordinador");
//			Log.v(TAG,"coordinador = "+getcoordinador.getNombre());
//			
//			
//     	   Log.v(TAG, getcoordinador.getId());
//     	   Log.v(TAG, getcoordinador.getEmail());
//     	   Log.v(TAG, getcoordinador.getImei());
//     	   Log.v(TAG, getcoordinador.getLat());
//     	   Log.v(TAG, getcoordinador.getLon());
//     	   Log.v(TAG, getcoordinador.getNombre());
//     	   Log.v(TAG, getcoordinador.getOperator());
//     	   Log.v(TAG, getcoordinador.getRegion());
     	   
			
		}
		
		
		/*
         * Comprueba el estado de la conexion a internet
         */
		Log.i(this.getClass().getSimpleName(),"Compruebo el estado de la conexion a internet");
		
        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo netInfo = cm.getActiveNetworkInfo();
        if (!(netInfo != null && netInfo.isConnectedOrConnecting())) {
        		Log.w(this.getClass().getSimpleName(),"No hay conexion a interntet!");
				AlertDialog alertDialog = new AlertDialog.Builder(ActivityScrollableMenu.this).create();
				
				alertDialog.setTitle("Conexi—n a Internet");
				alertDialog.setMessage("Esta aplicaci—n necesita internet para funcionar correctamente.");
				alertDialog.setButton("OK", new DialogInterface.OnClickListener() {
				      public void onClick(DialogInterface dialog, int which) {
				 
				       //here you can add functions
				 
				    } });
				alertDialog.setIcon(R.drawable.game);
				alertDialog.show();
				
				
		}
        
			
			
        
        try {
        	String[] languajes = OCR.getLanguagesNative();
        	if (languajes!=null && languajes.length>0) {
            	for (int i = 0; i < languajes.length; i++) {
    				Log.w(TAG,languajes[i]);
    			}
			}else{
				Toast.makeText(ActivityScrollableMenu.this, "No est‡n instalados los Idiomas", Toast.LENGTH_SHORT).show();
				
				instalacion.instalar(ActivityScrollableMenu.this,actionBar);
			}

		} catch (Exception e) {
			// TODO: handle exception
		}
        
        
       

    		
    		
//		progress.setMessage("Cargando...");
//		progress.setTitle(" ");
//		progress.setButton("Cancelar", new DialogInterface.OnClickListener() 
//        {
//            public void onClick(DialogInterface dialog, int which) 
//            {
//                // Use either finish() or return() to either close the activity or just the dialog
//                return;
//            }
//        });
//		progress.setIcon(R.drawable.ic_launcher);
//		progress.show();
		new DialogoCargado(progress).execute();

		
		
		
		// Get intent, action and MIME type
	    Intent intent = getIntent();
	    String action = intent.getAction();
	    String type = intent.getType();

	    if (Intent.ACTION_SEND.equals(action) && type != null) {
	        if  (type.startsWith("image/")) {
	            handleSendImage(intent); // Handle single image being sent
	        }
	    } else {
	        // Handle other intents, such as being started from the home screen
	    }
	
	
	    
		
	}

	
	
	   void handleSendText(Intent intent) {
	        String sharedText = intent.getStringExtra(Intent.EXTRA_TEXT);
	        if (sharedText != null) {
	            // Update UI to reflect text being shared
	        }
	    }

	    void handleSendImage(Intent intent) {
	        Uri imageUri = (Uri) intent.getParcelableExtra(Intent.EXTRA_STREAM);
	        if (imageUri != null) {
	            // Update UI to reflect image being shared
	        }
	    }

	    void handleSendMultipleImages(Intent intent) {
	        ArrayList<Uri> imageUris = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
	        if (imageUris != null) {
	            // Update UI to reflect multiple images being shared
	        }
	    }
	    
	    
    
    @Override
    public void onConfigurationChanged(Configuration newConfig) {
    	// TODO Auto-generated method stub
    	super.onConfigurationChanged(newConfig);
    	Log.w(TAG, "onConfigurationChanged : "+newConfig.orientation);
    }


    public ArrayList<DepartmentsParcelable> getdepartments(){
    	return departments;
    }
    
    
    public void setdepartments(ArrayList<DepartmentsParcelable> departments){
    	this.departments = departments;
    }


	
	
	
    
	class OnIndicatorClickListener implements ViewPagerIndicator.OnClickListener{
		@Override
		public void onCurrentClicked(View v) {
			Log.w(TAG,"onCurrentClicked");
//			Toast.makeText(ViewPagerIndicatorActivity.this, "Hello", Toast.LENGTH_SHORT).show();
		}
		
		@Override
		public void onNextClicked(View v) {
			Log.w(TAG,"onNextClicked");
			mViewPager.setCurrentItem(Math.min(mPagerAdapter.getCount() - 1, mIndicator.getCurrentPosition() + 1));
		}

		@Override
		public void onPreviousClicked(View v) {
			Log.w(TAG,"onPreviousClicked"); 
			mViewPager.setCurrentItem(Math.max(0, mIndicator.getCurrentPosition() - 1));
		}
    	
    
	
	}
    
	
	class PagerAdapter extends FragmentPagerAdapter implements ViewPagerIndicator.PageInfoProvider{
		
		
		private ArrayList<DepartmentsParcelable> departments; 
		private CoordinadorParcelable getcoordinador;
		
		
		
		public PagerAdapter(FragmentManager fm,ArrayList<DepartmentsParcelable> departments_list,CoordinadorParcelable getcoordinador) {
					
			super(fm);

			this.departments = departments_list;
			this.getcoordinador = getcoordinador;
			
			
			
			
		}

		@Override
		public ItemFragment getItem(int pos) {
				
			ItemFragment respuesta = new ItemFragment();
			
//				Log.i("PAGER ADAPTER - getitem ", departments.get(pos).getId());
//				Log.i("PAGER ADAPTER - getitem ", departments.get(pos).getDescription());
//				
//				Log.i("PAGER ADAPTER - getitem ", departments.get(pos).getYear());
//				Log.i("PAGER ADAPTER - getitem ", departments.get(pos).getWeek());
//				Log.i("PAGER ADAPTER - getitem ", departments.get(pos).getCod_coordinador());
//				
//				Log.i("PAGER ADAPTER - getitem ", departments.get(pos).getComentario());
//				
				
				Log.w("PAGER ADAPTER", "getItem  - llama a ItemFragment.newInstance(");
				respuesta = ItemFragment.newInstance( pos,departments.get(pos).getDescription(),departments.get(pos).getComentario(),departments.get(pos).getId());
				if (departments.get(pos).getComentario().equals("")) {
					// TODO: handle exception
					Log.w("PAGER ADAPTER-getItem ", " No hay comentario y lo estas pasando, dara error -- controlado ");
					respuesta = ItemFragment.newInstance( pos,departments.get(pos).getDescription(),departments.get(pos).getComentario(),departments.get(pos).getId());
				}
				
				return respuesta;
				
		}

		@Override
		public int getCount() {
//			Log.w("PAGER ADAPTER", "getCount  ");
			return departments.size();
		}
		
		public void updatefragment(int pos){
//			Log.e("updatefragment", "updatefragment  --------- -- - - - - -- - "+pos);
//			ItemFragment respuesta = new ItemFragment();
//			respuesta = ItemFragment.newInstance( pos,departments.get(pos).getDescription(),departments.get(pos).getComentario(),departments.get(pos).getComentarioActualizado(),departments.get(pos).getId(),getcoordinador.getOperator(),getcoordinador.getNombre(),getcoordinador.getRegion(),"0",departments.get(0).getYear(),departments.get(0).getWeek());
//			respuesta.update();
			
		}
		
		public ArrayList<DepartmentsParcelable> getDepartments(){
			return departments;
		}
		
		@Override
		public void notifyDataSetChanged() {
//			 TODO Auto-generated method stub
//			Log.w("PAGE ADAPTER","notifyDataSetChanged");
			super.notifyDataSetChanged();
		}

		@Override
		public void destroyItem(View container, int position, Object object) {
			// TODO Auto-generated method stub
//			Log.w("PAGE ADAPTER","destroyItem "+position);
			super.destroyItem(container, position, object);
		}

		@Override
		public Object instantiateItem(View container, int position) {
			// TODO Auto-generated method stub
//			Log.w("PAGE ADAPTER","instantiateItem "+position);
			return super.instantiateItem(container, position);
		}

		@Override
		public int getItemPosition(Object object) {
			// TODO Auto-generated method stub
//			Log.w("PAGE ADAPTER","getItemPosition" + object.toString());
			return super.getItemPosition(object);
		}

		@Override
		public String getTitle(int pos){
//			Calendar cal = Calendar.getInstance();
//			cal.add(Calendar.DAY_OF_MONTH, pos - getCount() / 2);
//			return readableDateFormat.format(cal.getTime());
			
//			return (pos+1)+"/"+getCount();
			
			switch (pos) {
			case 0:
				Log.w("PAGE ADAPTER",getResources().getString(R.string.Categorias));
				return getResources().getString(R.string.Categorias);
//				break;
			case 1:
				Log.w("PAGE ADAPTER",getResources().getString(R.string.Inicio));
				return getResources().getString(R.string.Inicio);
//				break;
			case 2:
				Log.w("PAGE ADAPTER","getTitle" + (pos+1)+"/"+getCount());
				return (pos+1)+"/"+getCount();
//				break;
			case 3:
				Log.w("PAGE ADAPTER","getTitle" + (pos+1)+"/"+getCount());
				return (pos+1)+"/"+getCount();
//				break;

			default:
				Log.w("PAGE ADAPTER","getTitle" + (pos+1)+"/"+getCount());
				return (pos+1)+"/"+getCount();
//				break;
			}
			

			
			
		}

		@Override
		public void finishUpdate(View container) {
			// TODO Auto-generated method stub
//			Log.w("PAGE ADAPTER","finishUpdate");
			super.finishUpdate(container);
		}

		@Override
		public boolean isViewFromObject(View view, Object object) {
			// TODO Auto-generated method stub
//			Log.w("PAGE ADAPTER","isViewFromObject");
			return super.isViewFromObject(view, object);
		}

		@Override
		public void restoreState(Parcelable state, ClassLoader loader) {
			// TODO Auto-generated method stub
//			Log.w("PAGE ADAPTER","restoreState");
			super.restoreState(state, loader);
		}

		@Override
		public Parcelable saveState() {
			// TODO Auto-generated method stub
			Log.w("PAGE ADAPTER","saveState");
			return super.saveState();
		}

		@Override
		public void startUpdate(View container) {
			// TODO Auto-generated method stub
//			Log.w("PAGE ADAPTER","startUpdate");
			
			
			super.startUpdate(container);
		}
		
	}
	
	
	
//	public static class ItemFragment extends ListFragment implements Runnable{
	public static class ItemFragment extends ListFragment {
			
		
//		private ProgressDialog m_pdOCRInProgress;				// display this progress dialog while OCR runs
		
		
			
			 private ProgressDialog progress;
			private static String TAG ;
			 
//			private String comentarioACTUALIZADO = "";
			
			
			int posicion;
			String departmentid;
			String descripcion;
			String comentario;
//		    String comentarioActualizado;
			String coordinadorid;
			String user;
			String region;
			String IsRemoved;
			String Year;
			String Week;
			
			
//			private DBAdapterInformeSemanal DBInformeSemanal;
			
			View v,tv;
			
			

			public static final String[] list = new String[]{""};


			View viewcomentario; 
			

			
			static ItemFragment newInstance( int pos, String descripcion,String comentario,String departmentid) {
			
				ItemFragment f = new ItemFragment();

		        // Supply num input as an argument.
		        Bundle args = new Bundle();

		        
		        
		        Log.v("ItemFragment", pos +"    ---   NEWINSTANCE dentro del metodo");
		        
		        
		        
		        Log.v("ItemFragment"," - NEWINSTANCE comentario = "+comentario);
//		        Log.v("ItemFragment"," - NEWINSTANCE comentarioActualizado = "+ComentariosActualizados.get(pos-1));
		        
		        args.putInt("posicion", pos+1);
		        args.putString("descripcion", descripcion);
		        args.putString("comentario", comentario);
//		        args.putString("comentarioActualizado",ComentariosActualizados.get(pos-1));
		        args.putString("departmentid", departmentid);

		        f.setArguments(args);

		        return f;
		    }
			
			@Override
			public void onCreate(Bundle savedInstanceState) {
				super.onCreate(savedInstanceState);
				
				TAG = getClass().getSimpleName(); 
			
				progress = new ProgressDialog(getActivity().getApplicationContext());
				
				try {
					this.posicion = (getArguments().getInt("posicion"));
					this.descripcion = (getArguments().getString("descripcion"));
					
					this.departmentid = (getArguments().getString("departmentid"));
					this.coordinadorid = (getArguments().getString("coordinadorid"));
					this.user = (getArguments().getString("user"));
					this.region = (getArguments().getString("region"));
					this.IsRemoved = (getArguments().getString("IsRemoved"));
					
					this.comentario = (getArguments().getString("comentario"));
//					this.comentarioActualizado = (getArguments().getString("comentarioActualizado"));

					this.Year = (getArguments().getString("Year"));
					this.Week = (getArguments().getString("Week"));
						

					
					

					Log.v("ItemFragment - onCreate comentarioActualizado = ",ComentariosActualizados.get(posicion-1));
					
					Log.v("ItemFragment",posicion+"---------------onCreate        "+ Year+" "+Week+" "+posicion+" "+descripcion+" "+comentario+" "+posicion+" "+coordinadorid+" "+user+" "+region+" "+IsRemoved);
					
				} catch (Exception e) {
					Log.v("ItemFragment", "ERROR ItemFragment- onCreate"+e.getMessage());
				}
				
			}
			
			
			
			
		    @Override
		    public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState) {
		    	
		    	
		    	
		    	if (this.posicion == 1) {
				
	    		  	v = inflater.inflate(R.layout.fragment_lateral_menu_categories, container, false);
//			        tv = v.findViewById(R.id.text);
//			        
//			        ((TextView)tv).setText(descripcion.toUpperCase());
			        
	    		  	
	    		  	String nombreapp ="";
	    		  	String version ="";
	    		  	
	    			try {
	    				nombreapp = getResources().getString(R.string.app_name).toLowerCase();
	    				PackageInfo pInfo = getActivity().getPackageManager().getPackageInfo(getActivity().getPackageName(), 0);
	    				version = pInfo.versionName;
	    			} catch (NameNotFoundException e1) {
	    				// TODO Auto-generated catch block
	    				e1.printStackTrace();
	    			}
	    			
	    			
	    		  	
					TextView tv_version = (TextView) v.findViewById(R.id.textViewVersion);
					tv_version.setText(nombreapp+" "+version);
							

					LinearLayout Search = (LinearLayout) v.findViewById(R.id.linearLayoutSearch);
					Search.setOnClickListener(new OnClickListener() {
						
						@Override
						public void onClick(View v) {
							// TODO Auto-generated method stub
						
							
							call_async_tasks.Search_Dialog(getActivity());
							
						}
					});
					
			        
			        LinearLayout URL = (LinearLayout) v.findViewById(R.id.LinearLayoutURL);
			        URL.setOnClickListener(new OnClickListener() {
						
						@Override
						public void onClick(View v) {
							// TODO Auto-generated method stub
					
							vibrate.toque(getActivity().getApplicationContext());
							
							Intent intent = new Intent(getActivity().getApplicationContext(), ActivityProcesarURL.class);
//							intent.putExtra("url", url);
							startActivity(intent);
							
						}
					});
			        
			        

					
					
			        
			        LinearLayout Camera = (LinearLayout) v.findViewById(R.id.LinearLayoutCamera);
			        Camera.setOnClickListener(new OnClickListener() {
						
						@Override
						public void onClick(View v) {
							// TODO Auto-generated method stub
					
							Intent intent = new Intent(getActivity().getApplicationContext(), com.itwizard.mezzofanti.Camera.class);
							startActivity(intent);
							
						}
					});
			        
			        
			        LinearLayout Imagen = (LinearLayout) v.findViewById(R.id.LinearLayoutImagen);
			        Imagen.setOnClickListener(new OnClickListener() {
						
						@Override
						public void onClick(View v) {
							// TODO Auto-generated method stub
							
							vibrate.toque(getActivity().getApplicationContext());
							
//							Intent intent = new Intent(getActivity().getApplicationContext(), com.itwizard.mezzofanti.Camera.class);
//							startActivity(intent);
							
//							Intent intent = new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
//							startActivityForResult(intent, SELECT_PHOTO);
							
							
							Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
							photoPickerIntent.setType("image/*");
							startActivityForResult(photoPickerIntent, SELECT_PHOTO);   
							
						}
					});
			        
			        	

		    	}else if (this.posicion == 2 ) {
				
	    		  	v = inflater.inflate(R.layout.fragment_camera, container, false);
	    		  	Camera_ocr = (ImageView) v.findViewById(R.id.imageViewCamera_Ocr);
//			        
			        Camera_ocr.setOnClickListener(new OnClickListener() {
						
						@Override
						public void onClick(View v) {
							// TODO Auto-generated method stub
							
							
							vibrate.toque(getActivity().getApplicationContext());
							
							Intent intent = new Intent(getActivity().getApplicationContext(), com.itwizard.mezzofanti.Camera.class);
							startActivity(intent);
							
						}
					});
			        
			        ImageView Galeria = (ImageView) v.findViewById(R.id.ImageViewGaleria);
			        Galeria.setOnClickListener(new OnClickListener() {
						
						@Override
						public void onClick(View v) {
							// TODO Auto-generated method stub
							
							
							vibrate.toque(getActivity().getApplicationContext());
							
//							Intent intent = new Intent(getActivity().getApplicationContext(), com.itwizard.mezzofanti.Camera.class);
//							startActivity(intent);
							
//							Intent intent = new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
//							startActivityForResult(intent, SELECT_PHOTO);
							
							
							Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
							photoPickerIntent.setType("image/*");
							startActivityForResult(photoPickerIntent, SELECT_PHOTO);   
							
							
							
						}
					});
			        
			        
			        ImageView URL = (ImageView) v.findViewById(R.id.ImageViewURL);
			        URL.setOnClickListener(new OnClickListener() {
						
						@Override
						public void onClick(View v) {
							// TODO Auto-generated method stub
							
							vibrate.toque(getActivity().getApplicationContext());
							
							Intent intent = new Intent(getActivity().getApplicationContext(), ActivityProcesarURL.class);
//							intent.putExtra("url", url);
							startActivity(intent);
							
							
						}
					});
			        
			        
		    		
				}else{
					  	v = inflater.inflate(R.layout.fragment_main_menu, container, false);
				        tv = v.findViewById(R.id.text);
				        
//				        ((TextView)tv).setText(descripcion.toUpperCase());
//				        
//				        
//				        viewcomentario = v.findViewById(R.id.editTextComentario);
//				        
////				        Log.v("ItemFragment",posicion+ " this.comentario ----- ");
//				        ((EditText)viewcomentario).setText(this.comentario);
				        
				        
				        
//				        Log.v("ItemFragment", "strcometario ="+ ComentariosActualizados.get(posicion-1));
				        
				        
				        
//				        Log.v("ItemFragment", "comentario ----- "+ comentario);
//				    	Log.v("ItemFragment", "comentarioActualizado ----- "+ ComentariosActualizados.get(posicion-1));
				    	
//						comentarioActualizado  = (((EditText)viewcomentario).getText().toString());
//						comentarioActualizado = comentarioActualizado.replace("\n", "<br />");

				    	
				    
//				        View Update = v.findViewById(R.id.buttonUpdate);
//				        ((Button) Update).setOnClickListener(new OnClickListener() {
//							
//							@Override
//							public void onClick(View v) {
//								// TODO Auto-generated method stub
//								
//							}
//							
//						});
				}
		    	
		        
		        return v;
		        
		    }
		    
		    

		    @Override
		    public void onActivityCreated(Bundle savedInstanceState) {
		        super.onActivityCreated(savedInstanceState);
//		        Log.v("ItemFragment", posicion+" onActivityCreated" );
		        setListAdapter(new ArrayAdapter<String>(getActivity(),android.R.layout.simple_list_item_1, list));
		        
		    }
		    
		    

		    @Override
		    public void onListItemClick(ListView l, View v, int position, long id) {
		        
//		    	Log.v("FragmentList", posicion+" Item clicked: " + id);
		    }

			@Override
			public ListAdapter getListAdapter() {
				// TODO Auto-generated method stub
//				Log.v("FragmentList", posicion+" getListAdapter");
				return super.getListAdapter();
			}

			@Override
			public ListView getListView() {
				// TODO Auto-generated method stub
//				Log.v("FragmentList", posicion+ " getListView");
				return super.getListView();
			}

			@Override
			public long getSelectedItemId() {
				// TODO Auto-generated method stub
				Log.v("FragmentList", posicion+" getSelectedItemId");
				return super.getSelectedItemId();
			}

			@Override
			public int getSelectedItemPosition() {
				// TODO Auto-generated method stub
//				Log.v("FragmentList", posicion+" getSelectedItemPosition");
				return super.getSelectedItemPosition();
			}

			@Override
			public void onDestroyView() {
				// TODO Auto-generated method stub
				super.onDestroyView();
			}
			
			
			

			@Override
			public void onViewCreated(View view, Bundle savedInstanceState) {
				// TODO Auto-generated method stub
//				Log.v("FragmentList", posicion+" -------------------------- onViewCreated");
				super.onViewCreated(view, savedInstanceState);
			}

			@Override
			public void setListShown(boolean shown) {
				// TODO Auto-generated method stub
//				Log.v("FragmentList", posicion+" setListShown");
				super.setListShown(shown);
			}

			@Override
			public void setSelection(int position) {
				// TODO Auto-generated method stub
//				Log.v("FragmentList", posicion+" ---------------------------setSelection");
				super.setSelection(position);
			}

			@Override
			public View getView() {
				// TODO Auto-generated method stub
				if (this.posicion ==1 ) {
					
					
				}else if (this.posicion ==2 ) {
				
				
				}else{
					try {
						ComentariosActualizados.set(posicion-1,  (((EditText)viewcomentario).getText().toString().replaceAll("\n", "<br />").replace("<br /><br />", "<br />").replaceAll("<br /><br />", "<br />")));
						
						Log.v("ItemFragment","GETVIEW - UPDATE strcometario- Actualizo "+(posicion-1)+" "+comentario + " a " +(((EditText)viewcomentario).getText().toString().replaceAll("\n", "<br />").replace("<br /><br />", "<br />").replaceAll("<br /><br />", "<br />")));	
					} catch (Exception e) {
						// TODO: handle exception
					}
					
					
				}
				return super.getView();
			}

			@Override
			public void onActivityResult(int requestCode, int resultCode,
					Intent data) {
				// TODO Auto-generated method stub
//				Log.v("FragmentList", posicion+" onActivityResult -- ");
				super.onActivityResult(requestCode, resultCode, data);
				

				    switch(requestCode) { 
				    case SELECT_PHOTO:
				        if(resultCode == RESULT_OK){  
				            Uri selectedImage = data.getData();
				            InputStream imageStream;
				            final Bitmap yourSelectedImage;
							try {
								imageStream = getActivity().getContentResolver().openInputStream(selectedImage);
								
								
								BitmapFactory.Options options=new BitmapFactory.Options();
								options.inSampleSize = 8;
								yourSelectedImage=BitmapFactory.decodeStream(imageStream,null,options);
								
//								Bitmap yourSelectedImage = BitmapFactory.decodeStream(imageStream);
								
								
//								Camera_ocr.setImageBitmap(yourSelectedImage);
								
								Log.v(TAG, "handleMessage() R.id.decode");
								ocr.CompareTime(TAG + "in handler, just received the picture");

								// do ocr
								try
								{
//									byte[] intriga = new byte[1024];
//									// save the file on disk
//									FileOutputStream fs = new FileOutputStream(RESULTS_PATH + "img.jpg");
//									fs.write(intriga, 0, intriga.length);
//									fs.close();
//
//									yourSelectedImage = BitmapFactory.decodeByteArray(intriga, 0, intriga.length);
//									intriga = null;
									System.gc();
									

									
									Log.v(TAG, "w="+yourSelectedImage.getWidth() + " h="+yourSelectedImage.getHeight());
//									if (m_bLineMode) // we crop just the image of interest
//										mBitmap = Bitmap.createBitmap(mBitmap, 256, 768/2-30, 512, 60, null, false);
									// otherwise, we use all image
								}
								catch (Throwable th) 
								{
									Log.v(TAG, "exception: handler-cmrequestpic: "+ th.toString());
//									m_bOCRInProgress = false;
//									if (m_bLineMode)
//										m_clCapture.ShowWaiting("");
//									else
//										m_MezzofantiMessageHandler.sendEmptyMessage(R.id.mezzofanti_restartCaptureMode);
									break;
								}


								ocr.CompareTime(TAG + "starting the thread");
												
								OCR.Initialize();				
								OCR.get().SetLanguage(OCR.mConfig.GetLanguage());
								
//								DoOCRJob(yourSelectedImage);

								
								Thread theOCRthread = new Thread(new Runnable() {
									
									@Override
									public void run() {
										// TODO Auto-generated method stub
										ocr.do_ocr(yourSelectedImage);
									}
								});
								theOCRthread.start();
								
								
								
								
							} catch (FileNotFoundException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							 catch (IOException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
							}
				            
				        }
				    }
				
				
			}

			@Override
			public void onDestroy() {
				// TODO Auto-generated method stub
				Log.v("FragmentList", posicion+" onDestroy-------------------------------------------");
//				
				super.onDestroy();
			}

			@Override
			public void onHiddenChanged(boolean hidden) {
				// TODO Auto-generated method stub
				
				super.onHiddenChanged(hidden);
			}

			@Override
			public void onPause() {
				// TODO Auto-generated method stub
				super.onPause();
			}
			
			

			@Override
			public void onResume() {
				// TODO Auto-generated method stub
				super.onResume();
			}

			@Override
			public void onStart() {
				// TODO Auto-generated method stub
//				Log.v("FragmentList", posicion+" onStart");
				super.onStart();
			}

			@Override
			public void onStop() {
				// TODO Auto-generated method stub
//				Log.v("FragmentList", posicion+" onStop");
				super.onStop();
			}
		    
		    
			
			

			
		}
	

	
	public class DialogoCargado extends AsyncTask<Void, Void, Void> {
//		private ProgressDialog progress;

  		  public DialogoCargado(ProgressDialog progress) {
//  			  this.progress = progress;
		  }
  		  
  		  @Override
		  public void onPreExecute() {
			  
//			  progress.show();
			    
			    
		  }
  		  
  		  
  		  @Override
		  public Void doInBackground(Void... unused) {
			  
			   Log.v(TAG,"doInBackground antes de close");
				
			   
				try {
//					departments = new ArrayList<DepartmentsParcelable>();
//				    Requester requester = new Requester("1234", "ADMIN", "A123QE8976A218798F");
//				    RequestPreguntas request = new RequestPreguntas("", "", "0", "false", "", "", getcoordinador.getRegion(),"") ;
//				    		
//				    		
//				    //departments = callWebService.WS_getDepartments(getResources().getString(R.string.user), getResources().getString(R.string.pass), getResources().getString(R.string.urlWebService), requester, request);
//				    departments = callWebService.WS_getDepartmentsAndWeekReports(getResources().getString(R.string.user), getResources().getString(R.string.pass), getResources().getString(R.string.urlWebService), requester, request,getcoordinador);
					

					departments = new ArrayList<DepartmentsParcelable>();
				    DepartmentsParcelable dep1 = new DepartmentsParcelable();
				    dep1.setComentario("dep1");
				    dep1.setDescription("dep1");
				    dep1.setCod_coordinador("dep1");
				    dep1.setComentarioActualizado("dep1ac");
				    dep1.setId("dep1");
				    departments.add(dep1);
				    DepartmentsParcelable dep2 = new DepartmentsParcelable();
				    dep2.setComentario("dep2");
				    dep2.setDescription("dep2");
				    dep2.setCod_coordinador("dep2");
				    dep2.setComentarioActualizado("dep2ac");
				    dep2.setId("dep2");
				    departments.add(dep2);
				    DepartmentsParcelable dep3 = new DepartmentsParcelable();
				    dep3.setComentario("dep3");
				    dep3.setDescription("dep3");
				    dep3.setCod_coordinador("dep3");
				    dep3.setComentarioActualizado("dep3ac");
				    dep3.setId("dep3");
				    departments.add(dep3);
				    DepartmentsParcelable dep4 = new DepartmentsParcelable();
				    dep4.setComentario("dep4");
				    dep4.setDescription("dep4");
				    dep4.setCod_coordinador("dep4");
				    dep4.setComentarioActualizado("dep4ac");
				    dep4.setId("dep4");
				    departments.add(dep4);
				    
					
					
				   
				} catch (Exception e) {
					// TODO: handle exception
					
					Log.e(TAG,"ERROR al obtener departamentos - "+e.getMessage());
				}
			    
			
			  return null;
		        
		  }
		  
		  
		  
		  
		  
		 @Override
		protected void onPostExecute(Void result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			
			if (departments!=null && departments.size()>0) {
				for (int i = 0; i < departments.size(); i++) {
					
//					ComentariosActualizados.add("");
					ComentariosActualizados.add(departments.get(i).getComentario());
			    }
			}else{
				Toast.makeText(getApplicationContext(), "No hay departamentos en este momento.", Toast.LENGTH_SHORT).show();
				finish();
			}
			   
			   
		
		    
			if (departments!=null) {
				
				try {
					
					Log.v("PAGER ADAPTER", departments.get(0).getId());
					Log.v("PAGER ADAPTER", departments.get(0).getDescription());
					
					Log.v("PAGER ADAPTER", departments.get(0).getYear());
					Log.v("PAGER ADAPTER", departments.get(0).getWeek());
					Log.v("PAGER ADAPTER", departments.get(0).getCod_coordinador());
					
					Log.v("PAGER ADAPTER", departments.get(0).getComentario());

				} catch (Exception e) {
					// TODO: handle exception
					Log.v("PAGER ADAPTER", "sin comentario "+e.getMessage() );
				}
				
				
				
				 getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
			        
			      
				 
				 
				 // Create our custom adapter to supply pages to the viewpager.
			        mPagerAdapter = new PagerAdapter(getSupportFragmentManager(),departments,null);
			        mViewPager = (ViewPager)findViewById(R.id.pager);
			        mViewPager.setAdapter(mPagerAdapter);
			        

			        
			        // Set the indicator as the pageChangeListener
			        mViewPager.setOnPageChangeListener(mIndicator);
			        
			        
			        // Initialize the indicator. We need some information here:
			        // * What page do we start on.
			        // * How many pages are there in total
			        // * A callback to get page titles
			        mIndicator.init(0, mPagerAdapter.getCount(), mPagerAdapter);
					Resources res = getResources();
					Drawable prev = res.getDrawable(R.drawable.indicator_prev_arrow);
					Drawable next = res.getDrawable(R.drawable.indicator_next_arrow);
					mIndicator.setFocusedTextColor(new int[]{255, 0, 0});
					
					// Set images for previous and next arrows.
					mIndicator.setArrows(prev, next);
					
					mIndicator.setOnClickListener(new OnIndicatorClickListener());
					
					mIndicator.setVisibility(View.VISIBLE);
					
			        // Start at a custom position
			        mViewPager.setCurrentItem(1, true);
			        
					
			}else{
				
				Log.v(TAG,"ERROR: Departments null");
				finish();
				
			}
			
			
			
//			progress.dismiss();
		}
		  
    }
    
	 
	@Override
	public void onBackPressed() {

//		builder = new AlertDialog.Builder(this);
//		builder.setMessage("Si cancelas, se perder‡n los datos. ÀQuieres cancelar?")
//			.setPositiveButton("Si", new DialogInterface.OnClickListener() {
//			
//				@Override
//				public void onClick(DialogInterface dialog, int which) {
//					// TODO Auto-generated method stub
//					finish();
//				}
//			})
//		    .setNegativeButton("No", new DialogInterface.OnClickListener() {
//				
//
//				@Override
//				public void onClick(DialogInterface dialog, int which) {
//					// TODO Auto-generated method stub
//					
//				}
//		});
//		builder.setTitle(" ");
//		builder.setIcon(R.drawable.logo_white_48a);
//		builder.show();
		
		super.onBackPressed();
	    
		
		
	}

			
			
	
	
	
	
    
}